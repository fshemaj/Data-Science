i = 1
zed = rosters["//nba-roster"]
counter = 0
print(length(XML::xmlChildren(zed[[i]])))
XML::xmlChildren(zed[[i]])
b = XML::xmlChildren(zed[[i]])
b["/nba-player"]
class(b)
length(b)
b[[1]]
b[[2]]
b[[3]]
b[[4]]
b[[5]]
b[[6]]
counter
rosters = xmlParse("NBA_ALL_ROSTER.XML")
zed = rosters["//nba-roster"]
counter = 0
for(i in 1:length(zed)) {
b = XML::xmlChildren(zed[[i]])
b["//nba-player"]
print(length(XML::xmlChildren(zed[[i]])))
counter = counter + length(XML::xmlChildren(zed[[i]]))
}
counter
rosters <- data.frame(
firstname = sapply(rosters["//nba-roster/nba-player/name/@first-name"], as, "character"),
lastname = sapply(rosters["//nba-roster/nba-player/name/@last-name"], as, "character"),
player = sapply(rosters["//nba-roster/nba-player/name/@display-name"], as, "character"),
jersey = sapply(rosters["//nba-roster/nba-player/player-number/@number"], as, "integer"),
position = sapply(rosters["//nba-roster/nba-player/player-position/@abbrev"], as, "character"),
primaryposition.id = sapply(rosters["//nba-roster/nba-player/primary-position/@id"], as, "integer"),
global.player.id = sapply(rosters["//nba-roster/nba-player/player-code/@global-id"], as, "integer"),
player.id = sapply(rosters["//nba-roster/nba-player/player-code/@id"], as, "integer")
)
for(i in c(1,2,3,5)) {
rosters[, i] = as.character(rosters[, i])
}
dim(rosters)
615 - 465
temp1 = rosters["//nba-roster"]
rosters = xmlParse("NBA_ALL_ROSTER.XML")
temp1 = rosters["//nba-roster"]
repeat_counter = c()
for(i in 1:length(temp1)) {
b = XML::xmlChildren(zed[[i]])
repeat_counter = c(repeat_counter, b-5)
}
repeat_counter = c()
for(i in 1:length(temp1)) {
b = length(XML::xmlChildren(zed[[i]]))
repeat_counter = c(repeat_counter, b-5)
}
sum(repeat_counter)
repeat_counter
team_names = sapply(rosters["//nba-roster/team-name/@name"])
team_names = sapply(rosters["//nba-roster/team-name/@name"], as, "character")
team_names
class(team_names)
runApp('~/Dropbox/My Documents/Stanford University/2016-17 Winter Quarter/SSACHackathon/my_app.R')
head(temp)
svu = read_csv("sportvu_formatted.csv")
rosters = read_csv("rosters.csv")
setwd("/Users/Home/Dropbox/My Documents/Stanford University/2016-17 Winter Quarter/SSACHackathon/")
rm(list = ls())
setwd("/Users/Home/Dropbox/My Documents/Stanford University/2016-17 Winter Quarter/SSACHackathon/")
data = read.csv("pscr.csv", stringsAsFactors = FALSE)
temp = round(apply(data[, 2:6], 2, FUN = function(x) (x - min(x)) / (max(x) - min(x))), digits = 2)
data = cbind(data$player, as.data.frame(temp)); colnames(data)[1] = "player"
choices_list = lapply(data$player, paste)
names(choices_list) = data$player
choices_list$`select player` = "leave empty"
svu = read_csv("sportvu_formatted.csv")
rosters = read_csv("rosters.csv")
rosters = rosters[, names(rosters) %in% c("player", "player.id")]
svu = merge(svu, rosters, by = "player.id")
svu = svu[order(-svu$game_clock), ]
head(svu)
this_player = "Kemba Walker"
svu = svu[svu$player == this_player, ]
head(svu)
dim(svu)
temp = svu[1:500, !(names(svu) %in% player.id)]
temp = svu[1:500, !(names(svu) %in% "player.id")]
plot(temp$x_loc, temp$y_loc)
temp = svu[1:250, !(names(svu) %in% "player.id")]
head(tmep)
head(temp)
temp = svu[1:250, !(names(svu) %in% c("player.id", "game_clock")]
temp = svu[1:250, !(names(svu) %in% c("player.id", "game_clock"))]
plot(temp$x_loc, temp$y_loc)
dput(temp)
ggplot(temp, aes(x = x_loc, y = y_loc)) +
geom_point(alpha = 0.5, size = 1)
# LOAD EVERYTHING BY RUNNING THIS CODE-BLOCK
setwd("/Users/Home/Dropbox/My Documents/Stanford University/2016-17 Winter Quarter/SSACHackathon/NBA_SPORTSVU_SAMPLE_FILE/")
rm(list = ls())
library(XML);
library(dplyr);
library(ggplot2);
library(tidyr);
library(readr);
# A LOADING UP ALL OF THE DATABASES - ~1 minute
# ----------------------------------------------------------------------------------------------
# A.1. NBA_ALL_ROSTER.XML - rosters
# ---------------------------------------------------------------------
# read XML NBA_ALL_ROSTER.XML into R
rosters = xmlParse("NBA_ALL_ROSTER.XML")
temp1 = rosters["//nba-roster"]
repeat_counter = c()
for(i in 1:length(temp1)) {
b = length(XML::xmlChildren(zed[[i]]))
repeat_counter = c(repeat_counter, b-5)
}
remove(temp1)
XML::xmlSize
team_names = sapply(rosters["//nba-roster/team-name/@name"], as, "character")
team_id = sapply(rosters["//nba-rosters/team-code/@id"])
# many other variables can be grabbed from this (rookie year, personal info, position details, weight/height, birth city, draft info)
rosters <- data.frame(
firstname = sapply(rosters["//nba-roster/nba-player/name/@first-name"], as, "character"),
lastname = sapply(rosters["//nba-roster/nba-player/name/@last-name"], as, "character"),
player = sapply(rosters["//nba-roster/nba-player/name/@display-name"], as, "character"),
jersey = sapply(rosters["//nba-roster/nba-player/player-number/@number"], as, "integer"),
position = sapply(rosters["//nba-roster/nba-player/player-position/@abbrev"], as, "character"),
primaryposition.id = sapply(rosters["//nba-roster/nba-player/primary-position/@id"], as, "integer"),
global.player.id = sapply(rosters["//nba-roster/nba-player/player-code/@global-id"], as, "integer"),
player.id = sapply(rosters["//nba-roster/nba-player/player-code/@id"], as, "integer")
)
for(i in c(1,2,3,5)) {
rosters[, i] = as.character(rosters[, i])
}
# ------
# A.2. NBA_SCHEDULE.XML - schedue1 schedule2
# ---------------------------------------------------------------------
# read XML into R
schedule = xmlParse("NBA_SCHEDULE.XML")
schedule1 <- data.frame(
Visitor = sapply(schedule["//visiting-team/team-name/@name"], as, "character"),
# V_pts = sapply(schedule["//visiting-team-score/@score"], as, "integer"),
Home = sapply(schedule["//home-team/team-name/@name"], as, "character"),
# H_pts = sapply(schedule["//home-team-score/@score"], as, "integer"),
A_AL = sapply(schedule["//visiting-team/team-name/@alias"], as, "character"),
H_AL = sapply(schedule["//home-team/team-name/@alias"], as, "character"),
Date = sapply(schedule["//game-schedule/date"], as, "character")
# Qtrs = sapply(schedule["//game-schedule/total-quarters/@total"], as, "integer"),
# Winner = sapply(schedule["//outcome-visit"], as, "character")
)
schedule2 <- data.frame(
V_pts = sapply(schedule["//visiting-team-score/@score"], as, "integer"),
H_pts = sapply(schedule["//home-team-score/@score"], as, "integer"),
Qtrs = sapply(schedule["//game-schedule/total-quarters/@total"], as, "integer"),
Winner = sapply(schedule["//outcome-visit"], as, "character")
)
# ------
# A.3. NBA_FINAL_SEQUENCE_OPTICAL$2016012523_Q1.XML - sportvu
# ---------------------------------------------------------------------
# 3.A loading and formatting the data to create a complete motion-data dataframe
sportvu = xmlParse("NBA_FINAL_SEQUENCE_OPTICAL$2016012523_Q1.XML")
# quick load the data into a dataframe - 10 secs for test data to load
sportvu <- data.frame(
game_clock = sapply(sportvu["//sequences/moment/@game-clock"], as, "numeric"),
time = sapply(sportvu["//sequences/moment/@time"], as, "character"),
game_event_id = sapply(sportvu["//sequences/moment/@game-event-id"], as, "integer"),
shot_clock = sapply(sportvu["//sequences/moment/@shot-clock"], as, "numeric"),
locations = sapply(sportvu["//sequences/moment/@locations"], as, "character")
)
# convert locations into what we want, many more columns
locations = as.character(sportvu$locations)
locations = strsplit(gsub(";", ",", locations), ",")
reps = sapply(locations, length) / 5
locations = as.data.frame(matrix(unlist(locations), ncol = 5, byrow = TRUE), stringsAsFactors = FALSE)
colnames(locations) = c("team_id", "global.player.id", "x_loc", "y_loc", "radius")
locations$global.player.id = as.integer(locations$global.player.id); locations$team_id = as.integer(locations$team_id); locations$x_loc = as.numeric(locations$x_loc); locations$y_loc = as.numeric(locations$y_loc); locations$radius = as.numeric(locations$radius)
# connect locations back with sportvu DF
sportvu = sportvu[!(names(sportvu) %in% "locations")]
sportvu = sportvu[rep(row.names(sportvu), reps), ]
sportvu = cbind(sportvu, locations)
sportvu$order = seq(1,nrow(sportvu),by=1)
remove(reps, locations)
# merge with rosters to create the final version of the df
sportvu = merge(sportvu, rosters, by = "global.player.id", all.x = TRUE, sort = FALSE)
sportvu = sportvu[order(sportvu$order), ]; sportvu = sportvu[!(names(sportvu) %in% "order")];
sportvu$time = as.numeric(as.character(sportvu$time))
sportvu$player.id[is.na(sportvu$player.id)] = -1
# remove entries from sportvu when the ball is dead
sportvu$order = seq(1,nrow(sportvu),by=1)
sportvu = as.data.frame(
sportvu %>%
group_by(game_clock) %>%
slice(tail(1:n(), 10))
)
sportvu$shot_clock[is.na(sportvu$shot_clock)] = 0
sportvu = sportvu[order(sportvu$order), ]
#   player_id lastname firstname jersey position    team_id    x_loc    y_loc radius game_clock shot_clock quarter event.id
# 1    202710   Butler     Jimmy     21      G-F 1610612741 24.69445 34.10450      0     701.81      23.41       1        2
# ------
# A.4. NBA_FINAL_ONCOURT$2016012523.XML - oncourt
# ---------------------------------------------------------------------
oncourt = xmlParse("NBA_FINAL_ONCOURT$2016012523.XML")
oncourt <- data.frame(
oncourt.id = unlist(lapply(sapply(oncourt["//nba-oncourt-players/oncourt/@id"], as, "integer"), rep, 10)),
player = sapply(oncourt["//player/@display-name"], as, "character")
)
oncourt = oncourt[order(oncourt$oncourt.id),]
oncourt$player = as.character(oncourt$player)
oncourt2 = as.data.frame(matrix(nrow = max(oncourt$oncourt.id), ncol = 11))
colnames(oncourt2) = c("oncourt.id", "P1", "P2", "P3", "P4", "P5", "Q1", "Q2", "Q3", "Q4", "Q5")
oncourt2$oncourt.id = seq(1,max(oncourt$oncourt.id),by=1)
counter = 0
for(i in 1:nrow(oncourt2)) {
for(j in 2:11) {
counter = counter + 1
oncourt2[i,j] = oncourt$player[counter]
}
oncourt = oncourt2; remove(oncourt2, counter, i, j);
# ------
# A.5. NBA_FINAL_SEQUENCE_PBP_OPTICAL$2016012523.XML - moments
# ---------------------------------------------------------------------
moments = xmlParse("NBA_FINAL_SEQUENCE_PBP_OPTICAL$2016012523.XML")
moments = sapply(moments["//sequence-pbp/moment"], as, "character")
moments = lapply(moments, function(x) {
df <- as.data.frame.list(XML::xmlToList(x))
is.na(df) <- df == ""
df
})
moments = data.table::rbindlist(moments, fill = TRUE)
moments = as.data.frame(moments)
for(i in c(1,4,5,6)) {
moments[, i] = as.integer(as.character(moments[, i]))
}
for(i in c(2,3,7)) {
moments[, i] = as.numeric(as.character(moments[, i]))
}
moments$shot.clock[moments$shot.clock < .25] = 0.25
moments$shot.clock[is.na(moments$shot.clock)] = 0.25
# ------
# A.6. NBA_FINALPBP_EXP$2016012523.XML - playbyplay
# ---------------------------------------------------------------------
playbyplay = xmlParse("NBA_FINALPBP_EXP$2016012523.XML")
playbyplay = sapply(playbyplay["//nba-playbyplay/play"], as, "character")
playbyplay = lapply(playbyplay, function(x) {
df <- as.data.frame.list(XML::xmlToList(x))
is.na(df) <- df == ""
df
})
playbyplay = data.table::rbindlist(playbyplay, fill = TRUE)
playbyplay = as.data.frame(playbyplay)
for(i in c(1,2,3,5,8,9,10,12,13,17,18,19,21,22,26,27,28,30,31,33,34,36,39,46,47,48,49,50,51,52)) {
playbyplay[, i] = as.integer(as.character(playbyplay[, i]))
}
for(i in c(4,40,41)) {
playbyplay[, i] = as.numeric(as.character(playbyplay[, i]))
}
for(i in c(6,7,11,14,15,16,20,23,24,25,29,32,35,37,53,54)) {
playbyplay[, i] = as.character(playbyplay[, i])
}
for(i in c(38,42,43,44,45)) {
playbyplay[, i] = as.logical(as.character(playbyplay[, i]))
}
# ------
# A.7. NBA_FINALBOX_OPTICAL$2016012523.XML - boxscores
# ---------------------------------------------------------------------
boxscores = xmlParse("NBA_FINALBOX_OPTICAL$2016012523.XML")
boxscores = sapply(boxscores["//possession"], as, "character")
boxscores = lapply(boxscores, function(x) {
df <- as.data.frame.list(XML::xmlToList(x))
is.na(df) <- df == ""
df
})
boxscores = data.table::rbindlist(boxscores, fill = TRUE)
boxscores = as.data.frame(boxscores)
boxscores$start.timestamp = as.numeric(as.character(boxscores$start.timestamp))
boxscores$end.timestamp = as.numeric(as.character(boxscores$end.timestamp))
boxscores = boxscores[boxscores$start.timestamp != -1 & boxscores$end.timestamp != -1, ]
# ------
# A.8. NBA_FINALBOX_OPTICAL$2016012523.XML - boxscores2
# ---------------------------------------------------------------------
boxscores2 = xmlParse("NBA_FINALBOX_OPTICAL$2016012523.XML")
boxscores2 <- data.frame(
player.id = sapply(boxscores2["//players/player/player-code/@id"], as, "integer"),
seconds.play = sapply(boxscores2["//players/player/total-seconds-tracked/@seconds"], as, "integer"),
seconds.possess = sapply(boxscores2["//players/player/time-of-possession/@seconds"], as, "integer"),
feet = sapply(boxscores2["//players/player/distance-run/@feet"], as, "integer"),
passes = sapply(boxscores2["//players/player/passes/@passes-made"], as, "integer"),
shots = sapply(boxscores2["//players/player/field-goals/@attempted"], as, "integer"),
turnovers = sapply(boxscores2["//players/player/turnovers/@turnovers"], as, "integer")
)
# ------
# A.9. PLAY ID MAPPING TO PLAY NAME
# ---------------------------------------------------------------------
playidmap = data.frame(
event.id = unique(playbyplay$event.id),
event.desc = unique(playbyplay$event.description)
)
# ------
runApp('~/Dropbox/My Documents/Stanford University/2016-17 Winter Quarter/SSACHackathon/my_app.R')
plotPath <- function(x, y, col = "grey", rule = "winding") {
plot.new()
plot.window(range(x, na.rm = TRUE), range(y, na.rm = TRUE))
polypath(x, y, col = col, rule = rule)
if (!is.na(col))
mtext(paste("Rule:", rule), side = 1, line = 0)
}
plotRules <- function(x, y, title) {
plotPath(x, y)
plotPath(x, y, rule = "evenodd")
mtext(title, side = 3, line = 0)
plotPath(x, y, col = NA)
}
op <- par(mfrow = c(5, 3), mar = c(2, 1, 1, 1))
plotRules(c(.1, .1, .9, .9, NA, .2, .2, .8, .8),
c(.1, .9, .9, .1, NA, .2, .8, .8, .2),
"Nested rectangles, both clockwise")
plotRules(c(.1, .1, .9, .9, NA, .2, .8, .8, .2),
c(.1, .9, .9, .1, NA, .2, .2, .8, .8),
"Nested rectangles, outer clockwise, inner anti-clockwise")
plotRules(c(.1, .1, .4, .4, NA, .6, .9, .9, .6),
c(.1, .4, .4, .1, NA, .6, .6, .9, .9),
"Disjoint rectangles")
plotRules(c(.1, .1, .6, .6, NA, .4, .4, .9, .9),
c(.1, .6, .6, .1, NA, .4, .9, .9, .4),
"Overlapping rectangles, both clockwise")
plotRules(c(.1, .1, .6, .6, NA, .4, .9, .9, .4),
c(.1, .6, .6, .1, NA, .4, .4, .9, .9),
"Overlapping rectangles, one clockwise, other anti-clockwise")
par(op)
setwd('/Users/PeterLee/Dropbox/Stats290 Project/Datas/NBA_SPORTSVU_SAMPLE_FILE')
rm(list = ls())
library(XML);
library(dplyr);
library(dplyr);
library(ggplot2);
library(dplyr);
library(ggplot2);
library(tidyr);
library(readr);
rosters = xmlParse("NBA_ALL_ROSTER.XML")
# ---------------------------------------------------------------------
# A.1. NBA_ALL_ROSTER.XML - rosters
# ---------------------------------------------------------------------
# read XML NBA_ALL_ROSTER.XML into R
rosters = xmlParse("NBA_ALL_ROSTER.XML")
temp1 = rosters["//nba-roster"]
repeat_counter = c()
for(i in 1:length(temp1)) {
b = length(XML::xmlChildren(temp1[[i]]))
repeat_counter = c(repeat_counter, b-5)
}
remove(temp1)
team_names = sapply(rosters["//nba-roster/team-name/@name"], as, "character")
team_id = sapply(rosters["//nba-roster/team-code/@id"], as, "integer")
# many other variables can be grabbed from this (rookie year, personal info, position details, weight/height, birth city, draft info)
rosters <- data.frame(
firstname = sapply(rosters["//nba-roster/nba-player/name/@first-name"], as, "character"),
lastname = sapply(rosters["//nba-roster/nba-player/name/@last-name"], as, "character"),
player = sapply(rosters["//nba-roster/nba-player/name/@display-name"], as, "character"),
jersey = sapply(rosters["//nba-roster/nba-player/player-number/@number"], as, "integer"),
position = sapply(rosters["//nba-roster/nba-player/player-position/@abbrev"], as, "character"),
primaryposition.id = sapply(rosters["//nba-roster/nba-player/primary-position/@id"], as, "integer"),
global.player.id = sapply(rosters["//nba-roster/nba-player/player-code/@global-id"], as, "integer"),
player.id = sapply(rosters["//nba-roster/nba-player/player-code/@id"], as, "integer"),
team.id = rep(team_id, repeat_counter),
team.name = rep(team_names, repeat_counter)
)
for(i in c(1,2,3,5,10)) {
rosters[, i] = as.character(rosters[, i])
}
remove(b, i, repeat_counter,team_id, team_names)
# ------
head(rosters)
# A.2. NBA_SCHEDULE.XML - schedue1 schedule2
# ---------------------------------------------------------------------
# read XML into R
schedule = xmlParse("NBA_SCHEDULE.XML")
schedule1 <- data.frame(
Visitor = sapply(schedule["//visiting-team/team-name/@name"], as, "character"),
# V_pts = sapply(schedule["//visiting-team-score/@score"], as, "integer"),
Home = sapply(schedule["//home-team/team-name/@name"], as, "character"),
# H_pts = sapply(schedule["//home-team-score/@score"], as, "integer"),
A_AL = sapply(schedule["//visiting-team/team-name/@alias"], as, "character"),
H_AL = sapply(schedule["//home-team/team-name/@alias"], as, "character"),
Date = sapply(schedule["//game-schedule/date"], as, "character")
# Qtrs = sapply(schedule["//game-schedule/total-quarters/@total"], as, "integer"),
# Winner = sapply(schedule["//outcome-visit"], as, "character")
)
schedule2 <- data.frame(
V_pts = sapply(schedule["//visiting-team-score/@score"], as, "integer"),
H_pts = sapply(schedule["//home-team-score/@score"], as, "integer"),
Qtrs = sapply(schedule["//game-schedule/total-quarters/@total"], as, "integer"),
Winner = sapply(schedule["//outcome-visit"], as, "character")
)
# ------
head(schedule1)
head(schedule2)
files = c("NBA_FINAL_ONCOURT$2016012523.XML", "NBA_FINAL_ONCOURT$2016013113.XML", "NBA_FINAL_ONCOURT$2016020323.XML", "NBA_FINAL_ONCOURT$2016020605.XML", "NBA_FINAL_ONCOURT$2016021022.XML")
oncourt_final = c()
for(k in 1:length(files)) {
print(k)
xml_url = files[k]
oncourt = xmlParse(xml_url)
oncourt <- data.frame(
oncourt.id = unlist(lapply(sapply(oncourt["//nba-oncourt-players/oncourt/@id"], as, "integer"), rep, 10)),
player = sapply(oncourt["//player/@display-name"], as, "character")
)
oncourt = oncourt[order(oncourt$oncourt.id),]
oncourt$player = as.character(oncourt$player)
oncourt2 = as.data.frame(matrix(nrow = max(oncourt$oncourt.id), ncol = 11))
colnames(oncourt2) = c("oncourt.id", "P1", "P2", "P3", "P4", "P5", "Q1", "Q2", "Q3", "Q4", "Q5")
oncourt2$oncourt.id = seq(1,max(oncourt$oncourt.id),by=1)
counter = 0
for(i in 1:nrow(oncourt2)) {
for(j in 2:11) {
counter = counter + 1
oncourt2[i,j] = oncourt$player[counter]
}
}
oncourt = oncourt2; remove(oncourt2, counter, i, j);
oncourt$game.id = k
oncourt_final = rbind(oncourt_final, oncourt)
}
setwd('/Users/PeterLee/Dropbox/Stats290 Project/Datas/NBA_SPORTSVU_FILES')
rm(list = ls())
setwd('/Users/PeterLee/Dropbox/Stats290 Project/Datas/NBA_SPORTSVU_FILES')
rm(list = ls())
library(XML);
library(dplyr);
library(ggplot2);
library(tidyr);
library(readr);
# A.1. NBA_ALL_ROSTER.XML - rosters
# ---------------------------------------------------------------------
# read XML NBA_ALL_ROSTER.XML into R
rosters = xmlParse("NBA_ALL_ROSTER.XML")
temp1 = rosters["//nba-roster"]
repeat_counter = c()
for(i in 1:length(temp1)) {
b = length(XML::xmlChildren(temp1[[i]]))
repeat_counter = c(repeat_counter, b-5)
}
remove(temp1)
team_names = sapply(rosters["//nba-roster/team-name/@name"], as, "character")
team_id = sapply(rosters["//nba-roster/team-code/@id"], as, "integer")
# many other variables can be grabbed from this (rookie year, personal info, position details, weight/height, birth city, draft info)
rosters <- data.frame(
firstname = sapply(rosters["//nba-roster/nba-player/name/@first-name"], as, "character"),
lastname = sapply(rosters["//nba-roster/nba-player/name/@last-name"], as, "character"),
player = sapply(rosters["//nba-roster/nba-player/name/@display-name"], as, "character"),
jersey = sapply(rosters["//nba-roster/nba-player/player-number/@number"], as, "integer"),
position = sapply(rosters["//nba-roster/nba-player/player-position/@abbrev"], as, "character"),
primaryposition.id = sapply(rosters["//nba-roster/nba-player/primary-position/@id"], as, "integer"),
global.player.id = sapply(rosters["//nba-roster/nba-player/player-code/@global-id"], as, "integer"),
player.id = sapply(rosters["//nba-roster/nba-player/player-code/@id"], as, "integer"),
team.id = rep(team_id, repeat_counter),
team.name = rep(team_names, repeat_counter)
)
for(i in c(1,2,3,5,10)) {
rosters[, i] = as.character(rosters[, i])
}
remove(b, i, repeat_counter,team_id, team_names)
# ------
# A.2. NBA_SCHEDULE.XML - schedue1 schedule2
# ---------------------------------------------------------------------
# read XML into R
schedule = xmlParse("NBA_SCHEDULE.XML")
schedule1 <- data.frame(
Visitor = sapply(schedule["//visiting-team/team-name/@name"], as, "character"),
# V_pts = sapply(schedule["//visiting-team-score/@score"], as, "integer"),
Home = sapply(schedule["//home-team/team-name/@name"], as, "character"),
# H_pts = sapply(schedule["//home-team-score/@score"], as, "integer"),
A_AL = sapply(schedule["//visiting-team/team-name/@alias"], as, "character"),
H_AL = sapply(schedule["//home-team/team-name/@alias"], as, "character"),
Date = sapply(schedule["//game-schedule/date"], as, "character")
# Qtrs = sapply(schedule["//game-schedule/total-quarters/@total"], as, "integer"),
# Winner = sapply(schedule["//outcome-visit"], as, "character")
)
schedule2 <- data.frame(
V_pts = sapply(schedule["//visiting-team-score/@score"], as, "integer"),
H_pts = sapply(schedule["//home-team-score/@score"], as, "integer"),
Qtrs = sapply(schedule["//game-schedule/total-quarters/@total"], as, "integer"),
Winner = sapply(schedule["//outcome-visit"], as, "character")
)
# ------
# A.4. NBA_FINAL_ONCOURT$2016012523.XML - oncourt
# ---------------------------------------------------------------------
files = c("NBA_FINAL_ONCOURT$2016012523.XML", "NBA_FINAL_ONCOURT$2016013113.XML", "NBA_FINAL_ONCOURT$2016020323.XML", "NBA_FINAL_ONCOURT$2016020605.XML", "NBA_FINAL_ONCOURT$2016021022.XML")
oncourt_final = c()
for(k in 1:length(files)) {
print(k)
xml_url = files[k]
oncourt = xmlParse(xml_url)
oncourt <- data.frame(
oncourt.id = unlist(lapply(sapply(oncourt["//nba-oncourt-players/oncourt/@id"], as, "integer"), rep, 10)),
player = sapply(oncourt["//player/@display-name"], as, "character")
)
oncourt = oncourt[order(oncourt$oncourt.id),]
oncourt$player = as.character(oncourt$player)
oncourt2 = as.data.frame(matrix(nrow = max(oncourt$oncourt.id), ncol = 11))
colnames(oncourt2) = c("oncourt.id", "P1", "P2", "P3", "P4", "P5", "Q1", "Q2", "Q3", "Q4", "Q5")
oncourt2$oncourt.id = seq(1,max(oncourt$oncourt.id),by=1)
counter = 0
for(i in 1:nrow(oncourt2)) {
for(j in 2:11) {
counter = counter + 1
oncourt2[i,j] = oncourt$player[counter]
}
}
oncourt = oncourt2; remove(oncourt2, counter, i, j);
oncourt$game.id = k
oncourt_final = rbind(oncourt_final, oncourt)
}
